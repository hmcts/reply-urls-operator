name: Build Operator

on:
  pull_request:
    paths-ignore:
      - .github/**
      - config/**
      - hack/**
      - scripts/**
      - README.md


env:
  # Common vars
  GITHUB_EVENT_NUMBER: ${{ github.event.number }}
  APP_NAME: reply-urls-operator
  VAR_FILE_PATH: ${{ github.workspace }}/.github/workflows
  TESTING_AZURE_CLIENT_SECRET: ${{ secrets.TESTING_CLIENT_SECRET }}
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

#      - name: Download Test tools
#        run: |
#          make envtest
#          go install github.com/jstemmer/go-junit-report@latest

      # Build Reply URLs Operator
      - name: Build
        run: go build -v -a -o manager main.go
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 0

      - uses: actions/upload-artifact@v2
        with:
          name: operator-binary
          path: ./manager
  Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Download Test tools
        run: |
          make envtest
          go install github.com/jstemmer/go-junit-report@latest

      - name: Run Go fmt, vet and test
        run: make test-ci
        env:
          GOOS: linux
          GOARCH: amd64

  Push:
    runs-on: ubuntu-latest
    needs: [Build, Test]
#    if: ${{ needs.build.result == 'success' && needs.build.result == 'success' }}

    steps:
      - uses: actions/checkout@main

      - uses: actions/download-artifact@v2
        with:
          name: operator-binary

      - uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","resourceManagerEndpointUrl":"https://management.azure.com","tenantId":"${{ secrets.TENANT_ID }}"}'

      - name: Load SDS vars
        run: |
          cat ${VAR_FILE} >> $GITHUB_ENV
        shell: bash
        env:
          VAR_FILE: ${{ env.VAR_FILE_PATH }}/sds.env

      - name: Get ACR Token
        uses: azure/CLI@v1
        with:
          inlineScript: |
            sds_token=$(az acr login -n ${{ env.REGISTRY_NAME }} --expose-token | jq -r .accessToken)
            echo "SDS_ACR_TOKEN=${sds_token}" >> $GITHUB_ENV

      # Connect to Azure Container Registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: 00000000-0000-0000-0000-000000000000
          password: ${{ env.SDS_ACR_TOKEN }}

      # Container build and push to an Azure Container Registry (ACR)
      - name: Build PR Container Image - SDS
        run: |
          ./scripts/docker.sh build pr-${{ env.GITHUB_EVENT_NUMBER }}
        shell: bash

      # Container build and push to an Azure Container Registry (ACR)
      - name: Push PR Container Image - SDS
        run: |
          ./scripts/docker.sh push pr-${{ env.GITHUB_EVENT_NUMBER }}
        shell: bash
#
#      - name: Load CFT vars
#        run: |
#          cat ${VAR_FILE} >> $GITHUB_ENV
#        shell: bash
#        env:
#          VAR_FILE: ${{ env.VAR_FILE_PATH }}/cft.env
#
#      - name: Get ACR Token CFT
#        uses: azure/CLI@v1
#        with:
#          inlineScript: |
#            cft_token=$(az acr login -n ${{ env.REGISTRY_NAME }} --expose-token | jq -r .accessToken)
#            echo "CFT_ACR_TOKEN=${cft_token}" >> $GITHUB_ENV
#      # Connect to Azure Container Registry (ACR)
#      - uses: azure/docker-login@v1
#        with:
#          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
#          username: 00000000-0000-0000-0000-000000000000
#          password: ${{ env.CFT_ACR_TOKEN }}
#
#      # Container build and push to an Azure Container Registry (ACR)
#      - name: Build and Push PR Container Image - CFT
#        run: |
#          ./scripts/docker.sh pr-${{ env.GITHUB_EVENT_NUMBER }}
#        shell: bash

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: "report.xml"
          comment_mode: always

      - name: Az logout
        run: |
          az logout
        shell: bash
        if: always()

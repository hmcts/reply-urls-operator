name: Build Operator

on: pull_request

env:
  # Common vars
  GITHUB_EVENT_NUMBER: ${{ github.event.number }}
  APP_NAME: reply-urls-operator
  VAR_FILE_PATH: ${{ github.workspace }}/.github/workflows

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Go fmt
        run: go fmt
        env:
          GOOS: darwin
          GOARCH: amd64

      # Build recipe-receiver app
      - name: Build
        run: go build -v .
        env:
          GOOS: linux
          GOARCH: amd64

#      - uses: azure/login@v1
#        with:
#          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","resourceManagerEndpointUrl":"https://management.azure.com","tenantId":"${{ secrets.TENANT_ID }}"}'

#      - name: Load SDS vars
#        run: |
#          cat ${VAR_FILE} >> $GITHUB_ENV
#        shell: bash
#        env:
#          VAR_FILE: ${{ env.VAR_FILE_PATH }}/sds.env

#      - name: Get ACR Token
#        uses: azure/CLI@v1
#        with:
#          inlineScript: |
#            az account set --subscription ${{ env.CLUSTER_SUB }}
#            sds_token=$(az acr login -n ${{ env.REGISTRY_NAME }} --expose-token | jq -r .accessToken)
#            echo "SDS_ACR_TOKEN=${sds_token}" >> $GITHUB_ENV
#      # Connect to Azure Container Registry (ACR)
#      - uses: azure/docker-login@v1
#        with:
#          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
#          username: 00000000-0000-0000-0000-000000000000
#          password: ${{ env.SDS_ACR_TOKEN }}

#      # Container build and push to an Azure Container Registry (ACR)
#      - name: Build and Push PR Container Image - SDS
#        run: |
#          ./scripts/docker.sh pr-${{ env.GITHUB_EVENT_NUMBER }}
#        shell: bash
#
#      - name: Load CFT vars
#        run: |
#          cat ${VAR_FILE} >> $GITHUB_ENV
#        shell: bash
#        env:
#          VAR_FILE: ${{ env.VAR_FILE_PATH }}/cft.env
#
#      - name: Get ACR Token CFT
#        uses: azure/CLI@v1
#        with:
#          inlineScript: |
#            az account set --subscription ${{ env.CLUSTER_SUB }}
#            cft_token=$(az acr login -n ${{ env.REGISTRY_NAME }} --expose-token | jq -r .accessToken)
#            echo "CFT_ACR_TOKEN=${cft_token}" >> $GITHUB_ENV
#      # Connect to Azure Container Registry (ACR)
#      - uses: azure/docker-login@v1
#        with:
#          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
#          username: 00000000-0000-0000-0000-000000000000
#          password: ${{ env.CFT_ACR_TOKEN }}
#
#      # Container build and push to an Azure Container Registry (ACR)
#      - name: Build and Push PR Container Image - CFT
#        run: |
#          ./scripts/docker.sh pr-${{ env.GITHUB_EVENT_NUMBER }}
#        shell: bash

#  deploy:
#    strategy:
#      matrix:
#        project: ["sds", "cft"]
#    runs-on: ubuntu-latest
#    needs: buildAndPush
#    steps:
#      - uses: actions/checkout@main
#
#      - name: Set up Go
#        uses: actions/setup-go@v3
#        with:
#          go-version: 1.18
#
#      # Load Project environment variables
#      - name: Load ${{ matrix.project }} vars
#        run: |
#          cat ${VAR_FILE} >> $GITHUB_ENV
#        shell: bash
#        env:
#          VAR_FILE: ${{ github.workspace }}/.github/workflows/${{ matrix.project }}.env
#
#      - uses: azure/login@v1
#        with:
#          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","resourceManagerEndpointUrl":"https://management.azure.com","tenantId":"${{ secrets.TENANT_ID }}"}'
#
#      # Create queue and fill it with messages
#      - name: Create queue
#        run: |
#          ./scripts/create-queue.sh ${{ env.QUEUE_NAME }}
#        shell: bash
#
#      # Deploy to AKS
#      - name: Deploy to AKS
#        run: |
#          ./scripts/k8s.sh deploy "${{ env.GITHUB_EVENT_NUMBER }}"
#        shell: bash
#
#      # Wait for message count to reach 0
#      - name: Watch queue
#        run: |
#          ./scripts/watch-queue.sh ${{ env.QUEUE_NAME }}
#        shell: bash
#
#      - name: Az logout
#        run: |
#          az logout
#        shell: bash
#        if: ${{ always() }}